"use strict";
(() => {
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });

  // src/index.ts
  var import_vue = __require("vue");
  var import_vue_router = __require("vue-router");
  var isVueFile = (name) => /\.vue/.test(name);
  function getRoutes(meta, options) {
    const reg = new RegExp(`[./]*${options.pathRoot}`);
    const path = Object.keys(meta).reduce((all, c) => {
      const paths = c.replace(reg, "").split("/");
      let tmp = all;
      while (paths.length) {
        const name = paths.shift() || "";
        if (!isVueFile(name)) {
          if (!tmp[name])
            tmp[name] = {};
          tmp = tmp[name];
        } else {
          const file = name.replace(".vue", "");
          tmp[file] = c;
        }
      }
      return all;
    }, {});
    return toArr(path, meta, 0);
  }
  var getPath = (name, deep) => deep > 0 ? name === "HomeView" ? "" : `${name}` : name === "HomeView" ? "/" : `/${name}`;
  function toArr(data, meta, deep) {
    return Object.entries(data).map(([name, pathInfo]) => {
      if (typeof pathInfo === "string") {
        return { path: getPath(name, deep), component: meta[pathInfo] };
      } else {
        return {
          path: getPath(name, deep),
          component: pathInfo.HomeView ? meta[pathInfo.HomeView] : (0, import_vue.h)(import_vue_router.RouterView),
          children: toArr(pathInfo, meta, deep + 1)
        };
      }
    });
  }
})();
